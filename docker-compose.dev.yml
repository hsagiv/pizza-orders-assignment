# Pizza Order Management System - Development Docker Compose
# This file defines the development setup with hot reloading and debugging

version: '3.8'

services:
  # PostgreSQL Database Service (Development)
  database:
    image: postgres:15-alpine
    container_name: pizza-database-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: pizza_orders_dev
      POSTGRES_USER: pizza_user
      POSTGRES_PASSWORD: pizza_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./server/src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./server/src/database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - pizza-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pizza_user -d pizza_orders_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache Service (Development)
  redis:
    image: redis:7-alpine
    container_name: pizza-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - pizza-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service (Development with hot reload)
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: pizza-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      HOST: 0.0.0.0
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: pizza_orders_dev
      DB_USER: pizza_user
      DB_PASSWORD: pizza_password
      DB_URL: postgresql://pizza_user:pizza_password@database:5432/pizza_orders_dev
      REDIS_HOST: redis
      REDIS_PORT: 6379
      API_PREFIX: /api
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: debug
      LOG_FORMAT: combined
      JWT_SECRET: dev-secret-key
      POLLING_ORDER_LIST_INTERVAL: 5000
      POLLING_ORDER_STATUS_INTERVAL: 3000
      WEBSOCKET_ENABLED: true
      UI_DEFAULT_ORDERS_PER_PAGE: 2
      UI_MAX_ORDERS_PER_PAGE: 4
    ports:
      - "3001:3001"
      - "9229:9229"  # Node.js debugging port
    volumes:
      - ./server:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pizza-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React Service (Development with hot reload)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: pizza-frontend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      REACT_APP_API_BASE_URL: http://localhost:3001/api
      REACT_APP_WS_URL: ws://localhost:3001
      REACT_APP_UI_DEFAULT_ORDERS_PER_PAGE: 2
      REACT_APP_UI_MAX_ORDERS_PER_PAGE: 4
      REACT_APP_UI_MIN_ORDERS_PER_PAGE: 1
      REACT_APP_UI_DEFAULT_SORT_BY: orderTime
      REACT_APP_UI_DEFAULT_SORT_ORDER: desc
      REACT_APP_UI_AUTO_REFRESH: true
      REACT_APP_UI_REFRESH_INTERVAL: 5000
      REACT_APP_UI_MAP_DEFAULT_ZOOM: 12
      REACT_APP_UI_MAP_DEFAULT_LAT: 40.7128
      REACT_APP_UI_MAP_DEFAULT_LNG: -74.0060
      REACT_APP_FEATURE_REALTIME: true
      REACT_APP_FEATURE_MAP: true
      REACT_APP_FEATURE_RTL: true
      REACT_APP_FEATURE_DARK_MODE: true
      WATCHPACK_POLLING: true
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - pizza-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Database Admin Tool (Optional)
  adminer:
    image: adminer:4.8.1
    container_name: pizza-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: database
    depends_on:
      - database
    networks:
      - pizza-dev-network

# Named Volumes (Development)
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

# Networks (Development)
networks:
  pizza-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
