# Pizza Order Management System - Docker Compose Configuration
# This file defines the multi-container setup for the entire application

version: '3.8'

services:
  # PostgreSQL Database Service
  database:
    image: postgres:15-alpine
    container_name: pizza-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: pizza_orders
      POSTGRES_USER: pizza_user
      POSTGRES_PASSWORD: pizza_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/src/database/migrations/001_initial_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./server/src/database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - pizza-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pizza_user -d pizza_orders"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache Service (for future use)
  redis:
    image: redis:7-alpine
    container_name: pizza-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pizza-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: pizza-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: pizza_orders
      DB_USER: pizza_user
      DB_PASSWORD: pizza_password
      DB_URL: postgresql://pizza_user:pizza_password@database:5432/pizza_orders
      REDIS_HOST: redis
      REDIS_PORT: 6379
      API_PREFIX: /api
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: info
      LOG_FORMAT: combined
      JWT_SECRET: your-super-secret-jwt-key-here
      POLLING_ORDER_LIST_INTERVAL: 5000
      POLLING_ORDER_STATUS_INTERVAL: 3000
      WEBSOCKET_ENABLED: true
      UI_DEFAULT_ORDERS_PER_PAGE: 2
      UI_MAX_ORDERS_PER_PAGE: 4
    ports:
      - "3001:3001"
    volumes:
      - /app/node_modules
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pizza-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React Service
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: pizza-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_BASE_URL: http://localhost:3001/api
      REACT_APP_WS_URL: ws://localhost:3001
      REACT_APP_UI_DEFAULT_ORDERS_PER_PAGE: 2
      REACT_APP_UI_MAX_ORDERS_PER_PAGE: 4
      REACT_APP_UI_MIN_ORDERS_PER_PAGE: 1
      REACT_APP_UI_DEFAULT_SORT_BY: orderTime
      REACT_APP_UI_DEFAULT_SORT_ORDER: desc
      REACT_APP_UI_AUTO_REFRESH: true
      REACT_APP_UI_REFRESH_INTERVAL: 5000
      REACT_APP_UI_MAP_DEFAULT_ZOOM: 12
      REACT_APP_UI_MAP_DEFAULT_LAT: 40.7128
      REACT_APP_UI_MAP_DEFAULT_LNG: -74.0060
      REACT_APP_FEATURE_REALTIME: true
      REACT_APP_FEATURE_MAP: true
      REACT_APP_FEATURE_RTL: true
      REACT_APP_FEATURE_DARK_MODE: true
    ports:
      - "3000:3000"
    volumes:
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - pizza-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: pizza-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - pizza-network
    profiles:
      - production

# Named Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Networks
networks:
  pizza-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
